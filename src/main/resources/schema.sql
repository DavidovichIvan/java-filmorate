create TABLE IF NOT EXISTS Users_DB (
user_id int generated by default as identity primary key,
name varchar(64) not null,
email varchar(64) not null,
login  varchar(64) not null,
birthday date not null,
CHECK name != ''
);

create unique index IF NOT EXISTS user_exists
ON Users_DB(name, email,  login, birthday);

create TABLE IF NOT EXISTS Friends (
id int generated by default as identity primary key,
    user_id int NOT NULL,
friend_id int NOT NULL,
friend_confirmed boolean DEFAULT false,
      FOREIGN KEY(user_id)
      REFERENCES Users_DB(user_id) ON delete CASCADE,
      FOREIGN KEY(friend_id)
      REFERENCES Users_DB(user_id) ON delete CASCADE,
        CONSTRAINT cant_be_self_friend CHECK (user_id != friend_id)
);

create unique index IF NOT EXISTS friend_exists
ON friends(user_id, friend_id);


create TABLE IF NOT EXISTS Rating
(
rating_id int generated by default as identity primary key,
rating_name varchar(64) not null
);

create unique index IF NOT EXISTS rating_exists
on Rating(rating_name);


create table IF NOT EXISTS Films(
film_id int generated by default as identity primary key,
title varchar(100) not null,
description varchar(200) not null,
release_date date not null,
duration int not null,
rating_id int not null,
rate int,
      FOREIGN KEY(rating_id)
      REFERENCES Rating (rating_id),
      CONSTRAINT year_cantbe_before CHECK (release_date >= '1895-12-28'),
      CHECK title != ''
);
create unique index IF NOT EXISTS film_exists
ON Films(title, release_date);


create table IF NOT EXISTS Genre(
genre_id int generated by default as identity primary key,
genre_name varchar(64) not null
);
create unique index IF NOT EXISTS genre_exists
ON Genre(genre_name);


create table IF NOT EXISTS Likes (
id int generated by default as identity primary key,
  film_id int NOT NULL,
user_id int NOT NULL,
      FOREIGN KEY(film_id)
      REFERENCES Films(film_id) ON delete CASCADE,
      FOREIGN KEY(user_id)
      REFERENCES Users_DB(user_id) ON delete CASCADE
);
create unique index IF NOT EXISTS like_exists
ON Likes(film_id, user_id);

create table IF NOT EXISTS Film_genre (
id int generated by default as identity primary key,
  film_id int NOT NULL,
genre_id int NOT NULL,
      FOREIGN KEY(film_id)
      REFERENCES Films(film_id) ON delete CASCADE,
      FOREIGN KEY(genre_id)
      REFERENCES Genre(genre_id) ON delete CASCADE
);
create unique index IF NOT EXISTS record_exists
ON Film_genre(film_id, genre_id);